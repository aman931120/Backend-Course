<-- LECTURE 94 -->
⭐ SERVER:
Server is something that serves, A server is a computer or a system that provides services or resources to other computers, called clients, over a network.
example : Nodejs and Bun

⭐ Node.js and Bun in the Context of Web Servers
JavaScript runtime environments used for building and running web servers, but they have different purposes and optimizations.

⭐ Creating Server with help of "Nodejs"
    ->http.createServer() creates a web server.
    ->The callback function (req, res) => {} runs every time a client (like a web browser) makes a request to the server.
        ->req (request) represents the incoming request (from the browser).
        ->res (response) is used to send a response back to the client.

⭐ Postman [use for testing]
Postman is used to test APIs before integrating them into a frontend like React.

⭐ Creating Server with help of "BUN"
What Should You Focus On?
✅ How Bun's serve() function works (like http.createServer in Node.js)
✅ How routing works (checking url.pathname)
✅ How responses are sent using new Response()
What Can You Skip?
❌ Exact syntax (you can always Google it)
❌ Remembering every method (as long as you understand the logic)




<-- LECTURE 95 -->
⭐ Nothing much he is just telling about the backend series. 
⭐ He is telling about course and he is telling about "GOAL" and here he will tell about transferrable knowledge.
⭐ complex and scalable backend.
 



<-- LECTURE 96 -->
⭐ Introduction : 
This lecture is based on how we can do Postman testing and how we check postman and how all the things works in Postman .

⭐ Express.js
It helps us to write Routes for our webpages.
Express.js is a backend web framework for Node.js used to build web applications and APIs. It simplifies handling HTTP requests and responses, making it easier to create robust web servers.

⭐ Routes:
Routes define how an application should handle different HTTP requests. In simple terms, a route is a combination of:
1. A URL (endpoint)
2. An HTTP method (GET, POST, etc.)
3. A callback function that runs when the route is accessed

⭐ Express.js
🔱First command that we will use is npm init.
🔱Second command is installing express "npm install express"
The command npm init is used to initialize a new Node.js project by creating a package.json file. package.json is a configuration file that stores metadata about your project, dependencies, scripts, and other settings.

⭐ package.json
"type": "module"    => we can use import
"type": "commonjs"  => we can use const import here


⭐ Dev Dependencies [Nodemon]
Dev dependencies (short for development dependencies) are packages that are required only during development and not in production.
"npm i -D nodemon" use for installing nodemon [Nodemon is a tool that automatically restarts your Node.js application whenever you make changes to your files.]


⭐ GET & POST & PUT & DELETE    [C-R-U-D]
app.post(); => for taking the input
app.get();  => for displaying something on routes
app.put();  => updating some information 
app.delete; => deleting some information




<-- LECTURE 97 -->
GOAL: tests and documentation with Postman and deployment

⭐ What is DigitalOcean?
DigitalOcean is a cloud computing platform that provides developers with Infrastructure-as-a-Service (IaaS) and Platform-as-a-Service (PaaS) solutions. It offers virtual machines (Droplets), managed databases, Kubernetes, object storage, and other cloud services that help developers deploy, manage, and scale applications easily.
👉Hosting websites & applications (Django, Flask, Node.js, etc.)
👉Running APIs & backend services

⭐ .env
A .env file (short for "environment file") is a simple text file that stores configuration settings and sensitive information (like API keys, database credentials, and secret tokens) for a project. It helps keep your code clean, secure, and easily configurable.
🔒Security
⚙️Easier Configuration 
🚫Prevents Accidental Leaks 




<-- LECTURE 98 -->  [Not that important for us]
⭐ Advanced Logging with Morgan and Winston
In backend development, logging is essential for debugging, monitoring, and maintaining applications. Two popular logging libraries for Node.js are Morgan and Winston. Let's understand them in a simple way.

1️⃣ Morgan: Request Logger
Morgan is used to log HTTP requests in Express.js applications. It helps in tracking API calls, response times, and status codes.

2️⃣ Winston: Advanced Logging
Winston is a flexible logging library that allows custom log levels, file logging, and log formatting.
🔱 npm install winston morgan
🔱 for configuration go to chaicode.com and select devop stuffs and copy the code of morgan and winston and then paste it in the "logger.js" file

⭐ When to Use This?
👉When debugging backend APIs.
👉When tracking errors and warnings in production.
👉When storing logs for future analysis.




<-- LECTURE 99 -->
GOAL : from idea to Database design

⭐ Introduction:
We are going to design a database[can be any sql and nosql database],What information each field is storing like if we are building a library management system so different field are used there.

⭐ Eraser Tool/websites :
It is used to design the database

⭐ Eraser code :->
todos[icon:list]{     this todo is a entity
  _id string pk
  content string
  complete boolean
  subTodos ObjectId[] subTodos
  createdBy ObjectId users
  updatedAt Date
  createdAt Date
}


users[icon:user]{     this users is a entity
  _id string pk
  username : string
  email string
  password string 
}

subTodos [icon:list]{
  _id string pk
  content string
  complete boolean
  createdBy ObjectId user
  createdAt Date
  updatedAt Date 
}

todos.subTodos < subTodos._id
todos.createdBy - users._id
subTodos.createdBy - users._id





<-- LECTURE 100 -->
GOAL : We are going to design a database for videotube 
network



<-- LECTURE 101 -->
GOAL :-> Backend project structure 

🔱"npm init" first command to initialize the folder
🔱"npm i --save-dev nodemon prettier" this command is to install dev dependencies
🔱"npm install express mongoose" install express mongoose 
NODEMON :-> is a development tool that automatically restarts your Node.js application when it detects changes in your code.
PRETTIER :-> is a code formatter that ensures consistent code style by automatically formatting your code according to predefined rules.

📂prettierrc -> This file is used to define formatting rules for your project.
📂prettierignore -> This file is used to tell Prettier which files or folders to ignore when formatting.

Next step:We created a src file and then we created following folder and files in them

amant@Aman MINGW64 /d/Backend Practise/SECTION_21/VIDTUBE/src (main)
$ mkdir controller db middlewares models routes utils
$ touch app.js index.js constants.js .env .env.sample
$ touch readme.md 


NEXT STEP: Go inside models and create these files
amant@Aman MINGW64 /d/Backend Practise/SECTION_21/VIDTUBE/src/models (main)
$ touch comment.models.js like.models.js playlist.models.js subscription.models.js tweet.models.js user.models.js video.models.js

⭐ How to run index.js file which we have created inside src folder❓
We can write our own script in package.json
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
Like this we can write our own script
"npm run start" => without nodemon
"npm run dev" -> with nodemon server, sever will be running in backend 


⭐ Core Files
📄index.js → Entry point of the app. Typically, it initializes the server and connects to the database.
📄app.js → Responsible for setting up the Express app, middleware (like body parsers, CORS), and routes.
📄.env → Stores sensitive environment variables (like DB_URL, API keys) to avoid hardcoding them in code.
📄.env.sample → Template of .env to show other developers what variables are needed without sharing sensitive data.
📄constants.js → Used to define app-wide constants (like error codes, status messages, or app configurations).
📄readme.md → Documentation file for the project, explaining how to set up, run, and contribute to the project.

⭐Folders for Organizing Code
📂controller/ → Contains logic for handling requests and responses. E.g., UserController handles user-specific operations.
📂db/ → Handles database connection logic (like connecting to MongoDB using mongoose).
📂middlewares/ → Custom middleware functions (e.g., authentication, logging, error handling).

📂models/ → Mongoose schemas defining the structure of data in MongoDB.
Inside models/:
  comment.models.js → Schema for comments on videos.
  like.models.js → Schema to track likes on videos or tweets.
  playlist.models.js → Schema for user-created playlists.
  subscription.models.js → Schema for user subscriptions.
  tweet.models.js → Schema for tweets (if integrating Twitter-like features).
  user.models.js → Schema for user data (e.g., username, email, password).
  video.models.js → Schema for video data (e.g., title, URL, likes, views).
  routes/ → Handles API endpoints and connects them to controllers.

📂utils/ → Utility functions/helpers (e.g., formatters, validators, error handlers).




<-- LECTURE 102 -->
⭐Step1 : Go inside app.js create a app 
import express from "express";
app = express();
and then export the express
export{app};

⭐Step-2 : Go inside index.js and import app
import {app} from "./app";
and then listen from app
app.listen(PORT,() => {
  console.log(`Server is running on port ${PORT}`);
}) 

⭐Step-3 : You can download dotenv using "npm i dotenv"
CREATE A ENV FILE in src folder and then put port value in It
PORT = 8000
import it in index.js by below command 
import dotenv from "dotenv"
dotenv.config({
  path:"./env"
})
after the above step we can write 
const PORT = process.env.PORT || 8001;


⭐Step-4 : some more stuff:CORS will talk with our database
"npm i cors" : with this we will allow who can talk to our application, you donot want all the application in world to talk to the application so we installed it
    Imagine you made a backend API (your app.js). Now, maybe your own frontend (like your React website) should be allowed to talk to your backend — but what if some random hacker website tries to access your backend too?
    Without CORS, your backend has no control over who can send requests. It’s like leaving your house door open to everyone. 
import cors in app.js and then 
app.use(
    cors({
        origin: process.env.CORS_ORIGIN,
        credentials:true
    })
)
and then make a variable CORS_ORIGIN in .env file
CORS_ORIGIN =*

⭐ MIDDLEWARES : CORS is a middleware
A function that sits between the request and the response
CORS : One specific type of middleware that controls who can talk to your serve


⭐Step-5: creating some common middleware
👉app.use(express.json({limit:"16kb"}));
// This middleware is used to parse incoming JSON payloads (data sent in request body as JSON). The limit: "16kb" part means you are restricting the maximum size of incoming JSON data to 16 kilobytes
👉app.use(express.urlencoded({extended:true,limit:"16kb"}))
// It helps your Express app understand form data — the type of data sent when a user submits a form on a website.
✅ Handles form data from HTML forms
✅ Makes req.body easy to use
✅ Sets a size limit so no one can flood your server with huge forms
👉app.use(express.static("public"))
// This middleware is used to serve static files like images, CSS files, HTML files, or client-side JavaScript files from a folder (here the folder is named public). Whenever the browser requests a file (like /logo.png), Express will look for it in the public folder.

⭐Step-6 : Login to MongoDB, and then create 
Go and checkit out how to create a database and manage it ....

⭐Step-7.1 : Go to constants.js 
export const DB_NAME = "vidtube"

⭐⭐⭐⭐⭐
Bascially you need to understand that we are just connecting database which is mongoDb and you can easily search and connect database whenever you need to connect it, so you should not memorise. It is just like cin and cout in c++ the   more you practise the more you become good in connection of database from project.

in index.js of db
import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

//method to connect database here 
//database connection takes time
const connectDB = async () => {
    try {
        const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
        👉never keep slash at the the end of env variable like MONGODB_URI
        console.log(`\n MongoDB connected ! DB host: ${connectionInstance.connection.host}`);
        
    } catch (error) {
        console.log("MongoDB Connection error",error);
        process.exit(1);
    }
}
export default connectDB;

in index.js of src file
import connectDB from "./db/index.js";
connectDB()
.then(() => {
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
})
.catch((err) => {
    console.log("Mongodb Connection error",err);
})




<-- LECTURE 103 -->
// all the thing in the video is optional and instead of that we can skip it but it is good industry practise so we should follow it
GOAL -> the goal is to create some helper utility function that will make our  error standarize and response standarize and will some our time 

⭐ Async Handler : A helper to handle async errors easily (avoids writing try-catch everywhere).
⭐ ApiResponse : A utility to make consistent JSON responses (status, message, data). Keeps response format clean and professional.
⭐ ApiError : ApiError is a utility class that helps you handle and send error responses in a clean, structured, and consistent way.

// the above utils files are standard practises 
// this whole thing can be used as optional




<-- LECTURE 104 -->
GOAL -> we going to build healthcheck APIs 
it create a endpoint which does the healthcheck , it just gives you response back that everything is running fine or not. It’s just like a "heartbeat" — a quick response to say "Hey! I’m alive and working fine."
// this is common standard practise
✨ In short:
✅ It’s a good practice (especially for production systems)
✅ It helps with monitoring, debugging, and automatic restarts
❌ It’s not mandatory for small personal projects or demos

⭐Step1: 
Go to the controllers and create a file which is "healthcheck.controllers.js" in that file import ApiResponse and asyncHandler
and then write the code of healthcheck and export it 

EACH MODELS WILL GET A CONTROLLER AND EACH CONTROLLER WILL GET ITS ROUTES

⭐Step 2 :
Each controller will have there own routes/ routeHandler so that we can organise everything in a better way, create a healthcheck.routes.js in routes folder,
// this is the standard code and will be used as same in every project 
// we wrote the code here and now we will go to app.js file and bring routes 

⭐Step 3 :
you can check healthcheck is working or not on postman by get request 
"http://localhost:8000/api/v1/healthcheck" => this comes from api.js




<-- LECTURE 105 -->
GOAL -> A guide to build models in MongoDB with aggregation plugin: we are going to write all the model that all we have  

⭐ Step 1 : first we will create model for users: if you learn this and rest other is just copy paste of this model . So just learn this and everything will be fine

⭐ we first write about user.model.js :- in this we just wrote our model and it is very easy to understand




<-- LECTURE 106 -->
GOAL :-> Hooks and methods in mongoose with JWT || Mongoose Hooks

⭐ Middlewares : 
They are functions that sit between the request and the response cycle in a web application. They process incoming requests before they reach the main logic (such as a route handler) and can modify responses before they are sent back to the client.

🔱 "npm i bcrypt" is the command which is used in Node.js applications to install the bcrypt package, which is commonly used for password hashing and security in backend development.

🔒 We are now just increasing Security with help of above module
import bcrypt  from "bcrypt";
userSchema.pre("save", async function (next){
    if(!this.modified("password"))  return next()
    this.password = bcrypt.hash(this.password,10)
    next()
})

userSchema.methods.isPasswordCorrect = async function(password){
    return await bcrypt.compare(password,this.password);
}


⭐ JWT :
Now after the security now we can provide user access toker or Refresh tokens 

🔱"npm i jsonwebtoken"
The command npm i jsonwebtoken is used in Node.js applications to install the jsonwebtoken (JWT) package. It is used for secure authentication and authorization by generating and verifying JSON Web Tokens (JWTs).
📌 Why Are We Using This?
🔐 Secure Authentication
🚀 Stateless & Scalable
⏳ Short-Lived Token

⭐ import jwt from "jsonwebtoken";
userSchema.methods.generateAccessToken = function () {
    // short lived access token 
    return jwt.sign(
      {
        _id: this._id,
        email: this.email,
        username: this.username,
        fullname: this.fullname,
      },
      process.env.ACCESS_TOKEN_SECRET,
      { expiresIn: process.env.ACCESS_TOKEN_EXPIRY }
    );
}