<-- LECTURE 94 -->
⭐ SERVER:
Server is something that serves, A server is a computer or a system that provides services or resources to other computers, called clients, over a network.
example : Nodejs and Bun

⭐ Node.js and Bun in the Context of Web Servers
JavaScript runtime environments used for building and running web servers, but they have different purposes and optimizations.

⭐ Creating Server with help of "Nodejs"
    ->http.createServer() creates a web server.
    ->The callback function (req, res) => {} runs every time a client (like a web browser) makes a request to the server.
        ->req (request) represents the incoming request (from the browser).
        ->res (response) is used to send a response back to the client.

⭐ Postman [use for testing]
Postman is used to test APIs before integrating them into a frontend like React.

⭐ Creating Server with help of "BUN"
What Should You Focus On?
✅ How Bun's serve() function works (like http.createServer in Node.js)
✅ How routing works (checking url.pathname)
✅ How responses are sent using new Response()
What Can You Skip?
❌ Exact syntax (you can always Google it)
❌ Remembering every method (as long as you understand the logic)




<-- LECTURE 95 -->
⭐ Nothing much he is just telling about the backend series. 
⭐ He is telling about course and he is telling about "GOAL" and here he will tell about transferrable knowledge.
⭐ complex and scalable backend.
 



<-- LECTURE 96 -->
⭐ Introduction : 
This lecture is based on how we can do Postman testing and how we check postman and how all the things works in Postman .

⭐ Express.js
It helps us to write Routes for our webpages.
Express.js is a backend web framework for Node.js used to build web applications and APIs. It simplifies handling HTTP requests and responses, making it easier to create robust web servers.

⭐ Routes:
Routes define how an application should handle different HTTP requests. In simple terms, a route is a combination of:
1. A URL (endpoint)
2. An HTTP method (GET, POST, etc.)
3. A callback function that runs when the route is accessed

⭐ Express.js
🔱First command that we will use is npm init.
🔱Second command is installing express "npm install express"
The command npm init is used to initialize a new Node.js project by creating a package.json file. package.json is a configuration file that stores metadata about your project, dependencies, scripts, and other settings.

⭐ package.json
"type": "module"    => we can use import
"type": "commonjs"  => we can use const import here


⭐ Dev Dependencies [Nodemon]
Dev dependencies (short for development dependencies) are packages that are required only during development and not in production.
"npm i -D nodemon" use for installing nodemon [Nodemon is a tool that automatically restarts your Node.js application whenever you make changes to your files.]


⭐ GET & POST & PUT & DELETE    [C-R-U-D]
app.post(); => for taking the input
app.get();  => for displaying something on routes
app.put();  => updating some information 
app.delete; => deleting some information




<-- LECTURE 97 -->
GOAL: tests and documentation with Postman and deployment

⭐ What is DigitalOcean?
DigitalOcean is a cloud computing platform that provides developers with Infrastructure-as-a-Service (IaaS) and Platform-as-a-Service (PaaS) solutions. It offers virtual machines (Droplets), managed databases, Kubernetes, object storage, and other cloud services that help developers deploy, manage, and scale applications easily.
👉Hosting websites & applications (Django, Flask, Node.js, etc.)
👉Running APIs & backend services

⭐ .env
A .env file (short for "environment file") is a simple text file that stores configuration settings and sensitive information (like API keys, database credentials, and secret tokens) for a project. It helps keep your code clean, secure, and easily configurable.
🔒Security
⚙️Easier Configuration 
🚫Prevents Accidental Leaks 




<-- LECTURE 98 -->  [Not that important for us]
⭐ Advanced Logging with Morgan and Winston
In backend development, logging is essential for debugging, monitoring, and maintaining applications. Two popular logging libraries for Node.js are Morgan and Winston. Let's understand them in a simple way.

1️⃣ Morgan: Request Logger
Morgan is used to log HTTP requests in Express.js applications. It helps in tracking API calls, response times, and status codes.

2️⃣ Winston: Advanced Logging
Winston is a flexible logging library that allows custom log levels, file logging, and log formatting.
🔱 npm install winston morgan
🔱 for configuration go to chaicode.com and select devop stuffs and copy the code of morgan and winston and then paste it in the "logger.js" file

⭐ When to Use This?
👉When debugging backend APIs.
👉When tracking errors and warnings in production.
👉When storing logs for future analysis.




<-- LECTURE 99 -->
GOAL : from idea to Database design

⭐ Introduction:
We are going to design a database[can be any sql and nosql database],What information each field is storing like if we are building a library management system so different field are used there.

⭐ Eraser Tool/websites :
It is used to design the database

⭐ Eraser code :->
todos[icon:list]{     this todo is a entity
  _id string pk
  content string
  complete boolean
  subTodos ObjectId[] subTodos
  createdBy ObjectId users
  updatedAt Date
  createdAt Date
}


users[icon:user]{     this users is a entity
  _id string pk
  username : string
  email string
  password string 
}

subTodos [icon:list]{
  _id string pk
  content string
  complete boolean
  createdBy ObjectId user
  createdAt Date
  updatedAt Date 
}

todos.subTodos < subTodos._id
todos.createdBy - users._id
subTodos.createdBy - users._id





<-- LECTURE 100 -->
GOAL : We are going to design a database for videotube 
network



<-- LECTURE 101 -->
GOAL :-> Backend project structure 

🔱"npm init" first command to initialize the folder
🔱"npm i --save-dev nodemon prettier" this command is to install dev dependencies
🔱"npm install express mongoose" install express mongoose 
NODEMON :-> is a development tool that automatically restarts your Node.js application when it detects changes in your code.
PRETTIER :-> is a code formatter that ensures consistent code style by automatically formatting your code according to predefined rules.

📂prettierrc -> This file is used to define formatting rules for your project.
📂prettierignore -> This file is used to tell Prettier which files or folders to ignore when formatting.

Next step:We created a src file and then we created following folder and files in them

amant@Aman MINGW64 /d/Backend Practise/SECTION_21/VIDTUBE/src (main)
$ mkdir controller db middlewares models routes utils
$ touch app.js index.js constants.js .env .env.sample
$ touch readme.md 


NEXT STEP: Go inside models and create these files
amant@Aman MINGW64 /d/Backend Practise/SECTION_21/VIDTUBE/src/models (main)
$ touch comment.models.js like.models.js playlist.models.js subscription.models.js tweet.models.js user.models.js video.models.js

⭐ How to run index.js file which we have created inside src folder❓
We can write our own script in package.json
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
Like this we can write our own script
"npm run start" => without nodemon
"npm run dev" -> with nodemon server, sever will be running in backend 


⭐ Core Files
📄index.js → Entry point of the app. Typically, it initializes the server and connects to the database.
📄app.js → Responsible for setting up the Express app, middleware (like body parsers, CORS), and routes.
📄.env → Stores sensitive environment variables (like DB_URL, API keys) to avoid hardcoding them in code.
📄.env.sample → Template of .env to show other developers what variables are needed without sharing sensitive data.
📄constants.js → Used to define app-wide constants (like error codes, status messages, or app configurations).
📄readme.md → Documentation file for the project, explaining how to set up, run, and contribute to the project.

⭐Folders for Organizing Code
📂controller/ → Contains logic for handling requests and responses. E.g., UserController handles user-specific operations.
📂db/ → Handles database connection logic (like connecting to MongoDB using mongoose).
📂middlewares/ → Custom middleware functions (e.g., authentication, logging, error handling).

📂models/ → Mongoose schemas defining the structure of data in MongoDB.
Inside models/:
  comment.models.js → Schema for comments on videos.
  like.models.js → Schema to track likes on videos or tweets.
  playlist.models.js → Schema for user-created playlists.
  subscription.models.js → Schema for user subscriptions.
  tweet.models.js → Schema for tweets (if integrating Twitter-like features).
  user.models.js → Schema for user data (e.g., username, email, password).
  video.models.js → Schema for video data (e.g., title, URL, likes, views).
  routes/ → Handles API endpoints and connects them to controllers.

📂utils/ → Utility functions/helpers (e.g., formatters, validators, error handlers).




<-- LECTURE 102 -->
⭐Step1 : Go inside app.js create a app 
import express from "express";
app = express();
and then export the express
export{app};

⭐Step-2 : Go inside index.js and import app
import {app} from "./app";
and then listen from app
app.listen(PORT,() => {
  console.log(`Server is running on port ${PORT}`);
}) 

⭐Step-3 : You can download dotenv using npm i dotenv
CREATE A ENV FILE in src folder and then put port value in It
PORT = 8000
import it in index.js
import dotenv from "dotenv"
dotenv.config({
  path:"./env"
})
after the above step we can write 
const PORT = process.env.PORT || 8001;


⭐Step-4 : some more stuff:Course will talk with our database
"npm i cors" : with this we will allow who can talk to our application, you donot want all the application in world to talk to the application so we installed it
    Imagine you made a backend API (your app.js). Now, maybe your own frontend (like your React website) should be allowed to talk to your backend — but what if some random hacker website tries to access your backend too?
    Without CORS, your backend has no control over who can send requests. It’s like leaving your house door open to everyone. 
import cors in app.js and then 
app.use(
    cors({
        origin: process.env.CORS_ORIGIN,
        credentials:true
    })
)
and then make a variable CORS_ORIGIN in .env file
CORS_ORIGIN =*

⭐ MIDDLEWARES : CORS is a middleware
A function that sits between the request and the response
CORS : One specific type of middleware that controls who can talk to your serve


⭐Step-5: creating some common middleware
app.use(express.json({limit:"16kb"}));
app.use(express.urlencoded({extended:true,limit:"16kb"}))
app.use(express.static("public"))

⭐Step-6 : Login to MongoDB, and then create 
Go and checkit out how to create a database and manage it ....

⭐Step-7.1 : Go to constants.js 
export const DB_NAME = "vidtube"






