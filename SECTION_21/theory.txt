<-- LECTURE 94 -->
‚≠ê SERVER:
Server is something that serves, A server is a computer or a system that provides services or resources to other computers, called clients, over a network.
example : Nodejs and Bun

‚≠ê Node.js and Bun in the Context of Web Servers
JavaScript runtime environments used for building and running web servers, but they have different purposes and optimizations.

‚≠ê Creating Server with help of "Nodejs"
    ->http.createServer() creates a web server.
    ->The callback function (req, res) => {} runs every time a client (like a web browser) makes a request to the server.
        ->req (request) represents the incoming request (from the browser).
        ->res (response) is used to send a response back to the client.

‚≠ê Postman [use for testing]
Postman is used to test APIs before integrating them into a frontend like React.

‚≠ê Creating Server with help of "BUN"
What Should You Focus On?
‚úÖ How Bun's serve() function works (like http.createServer in Node.js)
‚úÖ How routing works (checking url.pathname)
‚úÖ How responses are sent using new Response()
What Can You Skip?
‚ùå Exact syntax (you can always Google it)
‚ùå Remembering every method (as long as you understand the logic)




<-- LECTURE 95 -->
‚≠ê Nothing much he is just telling about the backend series. 
‚≠ê He is telling about course and he is telling about "GOAL" and here he will tell about transferrable knowledge.
‚≠ê complex and scalable backend.
 



<-- LECTURE 96 -->
‚≠ê Introduction : 
This lecture is based on how we can do Postman testing and how we check postman and how all the things works in Postman .

‚≠ê Express.js
It helps us to write Routes for out webpages.
Express.js is a backend web framework for Node.js used to build web applications and APIs. It simplifies handling HTTP requests and responses, making it easier to create robust web servers.

‚≠ê Routes:
Routes define how an application should handle different HTTP requests. In simple terms, a route is a combination of:
1. A URL (endpoint)
2. An HTTP method (GET, POST, etc.)
3. A callback function that runs when the route is accessed

‚≠ê Express.js
üî±First command that we will use is npm init.
üî±Second command is installing express "npm install express"
The command npm init is used to initialize a new Node.js project by creating a package.json file. package.json is a configuration file that stores metadata about your project, dependencies, scripts, and other settings.

‚≠ê package.json
"type": "module"    => we can use import
"type": "commonjs"  => we can use const import here


‚≠ê Dev Dependencies [Nodemon]
Dev dependencies (short for development dependencies) are packages that are required only during development and not in production.
"npm i -D nodemon" use for installing nodemon [Nodemon is a tool that automatically restarts your Node.js application whenever you make changes to your files.]


‚≠ê GET & POST & PUT & DELETE
app.post(); => for taking the input
app.get();  => for displaying something on routes
app.put();  => updating some information 
app.delete; => deleting some information

