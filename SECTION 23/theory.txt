// React course : in this section we are going to learn about text...

<-- Introduction Lecture -->
‚≠ê Why to learn React ?
    -> hype, job, trend, build UI(user interface)
    -> makes easy to manage and build complex frontend

‚≠ê When should I learn React ?
    -> After mastering JavaScript
    -> Most project donot need react in initial phase

‚≠ê Why react was created ?
    -> Ghost message Problem 
    -> No consistency in UI
    -> React was created to solve performance, scalability, and maintainability issues in front-end development.

‚≠ê Don't learn React if :
    -> you don't know how JS works OR DOM works

‚≠ê React learning Process :
    -> go-in-depth
    -> by making project(one topic at a time) : Todo, calculator, github API etc

‚≠ê React is a library
    -> framework V|S library
    -> Yes, React is a JavaScript library, not a framework. It was designed specifically for building user interfaces, particularly for single-page applications (SPAs).

‚≠ê Topic to learn
    -> core of React (state or UI manipulation, JSX)
    -> component Reusability
    -> Reusing of component (props)
    -> How to propogate change (hooks)

‚≠ê Additional Addon to React
    -> Router (React donot have router)
    -> State management (React donot have state management)
        [Redux, Redux toolkit, zustland, context API]
    -> class based component
        [legacy code]
    -> BAAS apps
        [Social media clone, e-commerce apps.....]




<-- Lecture 2 -->
‚≠ê npx : node package executor
üî± "npx create-react-app 01basicreact" this is a command, it is a bulky utility so it takes time to set up in our vs code [IDE]

üî± "npm run start" is used to run the react app 
üî± "npm run build" creates a build folder

üî± "npm create vite@latest" we will create react setup
üî± "npm install" it will install all the packages

‚≠ê Files that we will deleted from [01basicreact]
    -> setupTests.JS
    -> reportWebVitals.js
    -> logo.svg
    -> App.test.js
    -> App.css 
    -> index.css

‚≠ê Files that we will delete from [01vitereact]
    -> assets folder
    -> App.css
    -> index.css




<-- Lecture 3 -->
React is a SPA [single page application]

‚≠ê What is JSX in React?
JSX (JavaScript XML) is a syntax extension for JavaScript used in React to write UI components. It looks similar to HTML but allows JavaScript expressions inside it. JSX makes it easier to create and visualize UI elements by combining HTML-like syntax with JavaScript logic.

‚≠ê What is App.js 
It is basically a function that returns a HTML, and in last we export that function 

‚≠ê Inside 01vitereact
    -> in this we can create chai.jsx and it is basically another function with uppercase letter

‚≠ê Inside 01basicreact
    -> in this we created a chai.js and this chai .js is a component
    -> this chai.js is exported to app.js and then it is used 

 


<-- Lecture 4 -->
GOAL : create your own react library and JSX 
In this we are going to create "Khud ka react"

‚≠ê Not necessary to learn 
    -> first we created customReact folder and in that folder we made two files first is customReact.js and index.HTML
    -> This customReact.js is basically our main react
        > we loaded the root(index.html) file
        > we created a anchor tag
    
‚≠ê Bundler : Every react uses a bundler
bundler is a tool that takes your project's various files (JavaScript, CSS, images, etc.), processes them, and combines them into optimized, browser-friendly output.





<-- Lecture 5 -->
GOAL : Why we need HOOKS ?

‚≠ê WE created a folder which is 02counter using vite command

‚≠ê Nextstep :
    -> UI upatation is controlled by react
    -> we add features of addvalue and remove value




<-- Lecture 6 -->
GOAL : virtual DOM, Fibre and reconciliation [Interview Important]

‚≠ê createRoot method
It creates the root, behind the scene, in virtual DOM we can have track of the tree

‚≠ê React fibre Architecture
    -> React fibre is an ongoing reimplimentation of React's core algorithm.
    -> the goal of react fibre is to increase its sustanibility for the areas like animation, layout and gesture.
React Fiber is a reimplementation of React's core algorithm, developed over two years to improve React‚Äôs performance in areas like animation, layout, and gestures. Its key feature is incremental rendering, which allows rendering work to be split into chunks and processed over multiple frames. Other features include the ability to pause, abort, or reuse work, assign priority to updates, and introduce new concurrency primitives.

‚≠ê What is reconciliation?
Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM."
The algorithm React uses to diff one tree with another to determine which parts need to be changed

‚≠ê The Two Trees in Reconciliation:
1Ô∏è‚É£ Previous Virtual DOM Tree (Old Tree) ‚Äì This represents the UI before an update.
2Ô∏è‚É£ New Virtual DOM Tree (New Tree) ‚Äì This represents the UI after an update.


‚≠ê What is a fiber?
A Fiber is just a small unit of work in React‚Äôs rendering process. Think of it as a to-do list item for React, where each Fiber represents a piece of your UI (like a button, a div, or a component).

Before Fiber, React‚Äôs old system worked like this:
üìù "Hey browser, here‚Äôs my entire UI update. Apply it all at once!" (This could cause laggy interactions.)

With Fiber, React now says:
‚úÖ "Let‚Äôs break this update into smaller pieces. High-priority tasks first, and we‚Äôll do the rest when we have time."

‚≠ê Key updates Of fibre
‚úÖ Fiber = Task manager for UI updates
‚úÖ Breaks work into smaller chunks
‚úÖ Prioritizes urgent updates (user clicks > animations > background work)
‚úÖ Makes React faster and more responsive




<-- Lecture 7 -->
Goal : Tailwind and props in React, foundation of react will be over after this Lecture

‚≠ê First we created a 03tailwindprops folder 
    -> "npm install -D tailwind postcss autoprefixer" this is a dev dependency
    ->  "npx tailwind init -p" it will generate tailwind.config.js file 
    -> go to tailwind.config.js 
        /** @type {import('tailwindcss').Config} */
            export default {
            content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
            theme: {
                extend: {},
            },
            plugins: [],
            };
    -> go to index.css file in src and 
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

‚≠ê props : ye components ko banata hai Reusable




<-- Lecture 8 -->
‚≠ê In Previous video react foundation is over
GOAL : React specific question for interview question about counter game




<-- Lecture 9 -->
color app 



Lecture 12
npm i react-router-dom
